This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-10T16:06:37.663Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  index.ts
  tools.ts
  twitterClient.ts
  types.ts
.env.example
.gitignore
LICENSE
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/index.ts
================
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { ListToolsRequestSchema, CallToolRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { getTwitterClient } from './twitterClient.js';
import { assertPostTweetArgs, assertSearchTweetsArgs, assertReplyToTweetArgs } from './types.js';
import { TOOLS } from './tools.js';

const server = new Server({
    name: 'twitter-mcp-server',
    version: '0.0.1',
}, {
    capabilities: {
        tools: TOOLS
    }
});

server.setRequestHandler(ListToolsRequestSchema, async () => ({
    tools: Object.entries(TOOLS).map(([name, tool]) => ({
        name,
        ...tool
    }))
}));

server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const client = getTwitterClient();

    if (request.params.name === 'postTweet') {
        assertPostTweetArgs(request.params.arguments);
        const tweet = await client.v2.tweet(request.params.arguments.text);
        return {
            content: [{ type: 'text', text: `Tweet posted with id: ${tweet.data.id}` }],
        };
    }

    if (request.params.name === 'searchTweets') {
        assertSearchTweetsArgs(request.params.arguments);
        const tweets = await client.v2.search(request.params.arguments.query);
        return {
            content: [{ 
                type: 'text', 
                text: `Search results: ${JSON.stringify(tweets.data, null, 2)}` 
            }],
        };
    }

    if (request.params.name === 'replyToTweet') {
        assertReplyToTweetArgs(request.params.arguments);
        const reply = await client.v2.tweet({
            text: request.params.arguments.text,
            reply: {
                in_reply_to_tweet_id: request.params.arguments.tweetId,
            },
        });
        return {
            content: [{ type: 'text', text: `Replied to tweet ${request.params.arguments.tweetId} with id: ${reply.data.id}` }],
        };
    }

    throw new Error(`Tool not found: ${request.params.name}`);
});

const transport = new StdioServerTransport();
server.connect(transport).catch(console.error);

================
File: src/tools.ts
================
export const TOOLS = {
    postTweet: {
        description: 'Post a tweet to Twitter',
        inputSchema: {
            type: 'object',
            properties: {
                text: { type: 'string', description: 'The text of the tweet' },
            },
            required: ['text'],
        },
    },
    searchTweets: {
        description: 'Search for tweets on Twitter',
        inputSchema: {
            type: 'object',
            properties: {
                query: { type: 'string', description: 'The query to search for' },
            },
            required: ['query'],
        },
    },
    replyToTweet: {
        description: 'Reply to a tweet on Twitter',
        inputSchema: {
            type: 'object',
            properties: {
                tweetId: { type: 'string', description: 'The ID of the tweet to reply to' },
                text: { type: 'string', description: 'The text of the reply' },
            },
            required: ['tweetId', 'text'],
        },
    },
};

================
File: src/twitterClient.ts
================
import { TwitterApi } from 'twitter-api-v2';
import dotenv from 'dotenv';

dotenv.config();

export function getTwitterClient() {
    if (!process.env.X_API_KEY || !process.env.X_API_SECRET || !process.env.X_ACCESS_TOKEN || !process.env.X_ACCESS_TOKEN_SECRET) {
        throw new Error('Twitter API credentials not found in environment variables');
    }

    const client = new TwitterApi({
        appKey: process.env.X_API_KEY,
        appSecret: process.env.X_API_SECRET,
        accessToken: process.env.X_ACCESS_TOKEN,
        accessSecret: process.env.X_ACCESS_TOKEN_SECRET,
    });

    return client;
}

================
File: src/types.ts
================
export interface PostTweetArgs {
    text: string;
}

export interface SearchTweetsArgs {
    query: string;
}

export interface ReplyToTweetArgs {
    tweetId: string;
    text: string;
}

export function assertPostTweetArgs(args: unknown): asserts args is PostTweetArgs {
    if (typeof args !== 'object' || args === null) {
        throw new Error('Invalid arguments: expected object');
    }
    if (!('text' in args) || typeof (args as any).text !== 'string') {
        throw new Error('Invalid arguments: expected text string');
    }
}

export function assertSearchTweetsArgs(args: unknown): asserts args is SearchTweetsArgs {
    if (typeof args !== 'object' || args === null) {
        throw new Error('Invalid arguments: expected object');
    }
    if (!('query' in args) || typeof (args as any).query !== 'string') {
        throw new Error('Invalid arguments: expected query string');
    }
}

export function assertReplyToTweetArgs(args: unknown): asserts args is ReplyToTweetArgs {
    if (typeof args !== 'object' || args === null) {
        throw new Error('Invalid arguments: expected object');
    }
    if (!('tweetId' in args) || typeof (args as any).tweetId !== 'string') {
        throw new Error('Invalid arguments: expected tweetId string');
    }
    if (!('text' in args) || typeof (args as any).text !== 'string') {
        throw new Error('Invalid arguments: expected text string');
    }
}

================
File: .env.example
================
# X (Twitter) API Credentials
# Get these from the X Developer Portal (https://developer.twitter.com/en/portal/dashboard)
X_API_KEY=
X_API_SECRET=
X_ACCESS_TOKEN=
X_ACCESS_TOKEN_SECRET=

================
File: .gitignore
================
# Dependencies
node_modules/

# Build output
dist/

# Environment variables
.env

# IDE files
.vscode/
.idea/

# Logs
*.log
npm-debug.log*

# OS files
.DS_Store
Thumbs.db

================
File: LICENSE
================
MIT License

Copyright (c) 2024 MCP Twitter Server Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "mcp-twitter-server",
  "version": "0.0.2",
  "description": "A Model Context Protocol server for Twitter integration",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "module",
  "bin": {
    "mcp-twitter-server": "dist/index.js"
  },
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "prepare": "npm run build"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE"
  ],
  "keywords": [
    "mcp",
    "twitter",
    "llm",
    "ai",
    "model-context-protocol",
    "claude",
    "anthropic",
    "x"
  ],
  "author": "Dennison Bertram",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/crazyrabbitLTC/mcp-twitter-server.git"
  },
  "bugs": {
    "url": "https://github.com/crazyrabbitLTC/mcp-twitter-server/issues"
  },
  "homepage": "https://github.com/crazyrabbitLTC/mcp-twitter-server#readme",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.0.0",
    "twitter-api-v2": "^1.15.1",
    "zod": "^3.0.0",
    "dotenv": "^16.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0"
  },
  "engines": {
    "node": ">=18"
  },
  "publishConfig": {
    "access": "public"
  }
}

================
File: README.md
================
# Twitter MCP Server

A Model Context Protocol (MCP) server that allows Large Language Models (LLMs) to interact with Twitter (X). This server provides tools for posting tweets, searching tweets, and replying to tweets.

## Features

- **Post Tweets:** Allows LLMs to post new tweets to your Twitter account
- **Search Tweets:** Allows LLMs to search for tweets based on keywords
- **Reply to Tweets:** Allows LLMs to reply to existing tweets, which can be used to make threads

## Prerequisites

Before you begin, ensure you have met the following requirements:

- **Node.js** (version 18 or higher) installed. You can download it from [nodejs.org](https://nodejs.org/)
- **npm** (comes with Node.js)
- A **Twitter Developer Account** and API keys (see [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard)). You will need API Key, API Secret Key, Access Token, Access Token Secret
- **Claude for Desktop** installed. You can download it from [claude.ai/download](https://claude.ai/download)

## Installation

1. **Install the package:**
   ```bash
   npm install mcp-twitter-server
   ```

2. **Set up environment variables:**
   - Create a `.env` file in your project root
   - Add your Twitter API keys and access tokens:
   ```env
   # Twitter API Credentials
   X_API_KEY=your_api_key
   X_API_SECRET=your_api_secret
   X_ACCESS_TOKEN=your_access_token
   X_ACCESS_TOKEN_SECRET=your_access_token_secret
   ```

## Using with Claude Desktop

To connect this Twitter MCP server to Claude Desktop:

1. **Open Claude Desktop Settings:**
   - Open the Claude Desktop application
   - Click the Claude menu from the top of your screen
   - Select "Settings..."

2. **Open Developer Settings:**
   - Select the "Developer" tab in the left panel
   - Click "Edit Config." This should open a `claude_desktop_config.json` file in your text editor

3. **Add the Server Configuration:**
   Add the following configuration to your `claude_desktop_config.json`:

   ```json
   {
     "mcpServers": {
       "twitter": {
         "command": "node",
         "args": [
           "/ABSOLUTE/PATH/TO/node_modules/mcp-twitter-server/dist/index.js"
         ],
         "env": {
           "X_API_KEY": "YOUR_TWITTER_API_KEY",
           "X_API_SECRET": "YOUR_TWITTER_API_SECRET",
           "X_ACCESS_TOKEN": "YOUR_TWITTER_ACCESS_TOKEN",
           "X_ACCESS_TOKEN_SECRET": "YOUR_TWITTER_ACCESS_TOKEN_SECRET"
         }
       }
     }
   }
   ```

   Replace the placeholders:
   - Update the path to match your project's `node_modules` location
   - Add your actual Twitter API credentials
   - **macOS path example:** `/Users/yourusername/project/node_modules/mcp-twitter-server/dist/index.js`
   - **Windows path example:** `C:\\Users\\yourusername\\project\\node_modules\\mcp-twitter-server\\dist\\index.js`

4. **Save and Restart:**
   - Save the `claude_desktop_config.json` file
   - Restart Claude Desktop

## Available Tools

### postTweet
Posts a new tweet to Twitter.
```typescript
{
    text: string; // The text of the tweet
}
```

### searchTweets
Searches for tweets on Twitter.
```typescript
{
    query: string; // The search query
}
```

### replyToTweet
Replies to an existing tweet.
```typescript
{
    tweetId: string; // The ID of the tweet to reply to
    text: string;    // The text of the reply
}
```

## Using the Tools

Once connected, you can use the tools by prompting Claude. For example:

1. **Post a tweet:**
   ```
   Post a tweet saying "Hello, world!"
   ```

2. **Search for tweets:**
   ```
   Search for tweets about "artificial intelligence"
   ```

3. **Reply to a tweet:**
   ```
   Search for tweets about "test"
   ```
   Then use the tweet ID from the results:
   ```
   Reply to tweet with id <TWEET_ID> saying "This is a reply"
   ```

## Development

To run the server directly:

1. Clone the repository:
   ```bash
   git clone https://github.com/crazyrabbitLTC/mcp-twitter-server.git
   cd mcp-twitter-server
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Build and run:
   ```bash
   npm run build
   npm start
   ```

## Contributing

Contributions are welcome! Please feel free to submit pull requests or create issues to suggest improvements.

## License

This project is licensed under the MIT License.
```

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
